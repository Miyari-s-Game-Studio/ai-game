
// src/lib/i18n.ts
import type {
  GameRules,
  GenerateActionNarrativeInput,
  GenerateCharacterInput,
  GenerateSceneDescriptionInput,
  ReachAgreementInput,
  ExtractSecretInput,
  ValidateSecretInput,
  GenerateRelevantAttributesInput,
  GenerateDifficultyClassInput,
} from "@/types/game";

type Language = 'en' | 'zh';

const translations = {
  en: {
    // UI Translations from before...
    loadingScene: 'Generating scene...',
    characterApproaching: 'Character is approaching...',
    aiCraftingStory: 'AI is crafting the next part of your story...',
    aiCalculatingAction: 'AI is calculating the action...',
    currentSituation: 'Current Situation',
    lastActionResult: 'Last Action Result',
    error: 'Error',
    failedToGenerateScene: 'Could not generate the scene description.',
    invalidSituation: 'The current situation is not defined in the game rules.',
    pleaseCheckRules: 'Please check your rules configuration.',
    failedToProcessAction: 'Failed to process the action. Please try again.',
    viewFullLog: 'View Full Log',
    environmentalStatus: 'Environmental Status',
    keyItemsAndInfo: 'Key Items & Info',
    storyWillUnfold: 'The story will unfold here...',
    talkingTo: 'Talking to',
    yourObjective: 'Your Objective',
    uncoverSecret: 'Your goal is to figure out the secret this person is hiding.',
    iKnowTheSecret: "I know the secret...",
    getThemToAgree: 'Get them to agree to the following:',
    saySomething: 'Say something...',
    send: 'Send',
    endConversation: 'End Conversation',
    objectiveAchieved: 'Objective Achieved!',
    characterLostInThought: 'The character seems lost in thought and does not reply.',
    loadGame: 'Load Game',
    loadGameDescription: 'Select a saved game to continue your progress.',
    noSavedGames: 'No saved games found for this language.',
    load: 'Load',
    cancel: 'Cancel',
    continue: 'Continue',
    areYouSure: 'Are you sure?',
    deleteCharacterConfirmation: "This action cannot be undone. This will permanently delete your character and all associated save files.",
    fullActionLog: 'Full Action Log',
    actionLogDescription: 'A complete history of your actions and the resulting narrative.',
    gameControls: 'Game Controls',
    settings: 'Settings',
    manageRules: 'Manage Rules',
    scenarios: 'Scenarios',
    selectScenario: 'Select a Scenario',
    selectScenarioDescription: 'Choose an interactive story to begin, or load a saved game.',
    playScenario: 'Play Scenario',
    version: 'Version',
    yourStory: 'Your Story',
    createNew: 'Create New',
    gameSaved: 'Game Saved',
    saveFailed: 'Save Failed',
    gameLoaded: 'Game Loaded',
    saveDeleted: 'Save Deleted',
    createYourCharacter: 'Create Your Character',
    editYourCharacter: 'Edit Your Character',
    defineYourRoleIn: 'Define your role in',
    language: 'Language',
    languageEnglish: 'English',
    languageChinese: 'Chinese',
    characterName: 'Character Name',
    enterNamePlaceholder: 'e.g., Alex Ryder',
    characterIdentity: 'Character Identity / Role',
    enterIdentityPlaceholder: 'e.g., Freelance Investigator',
    beginAdventure: 'Begin Adventure',
    validateSecretTitle: 'Validate Secret',
    validateSecretDescription: 'What do you believe the secret is? Enter it below. The AI will determine if your guess is correct.',
    enterSecretPlaceholder: 'Type your guess here...',
    submitGuess: 'Submit Guess',
    guessCorrectTitle: 'Guess Correct!',
    guessIncorrectTitle: 'Guess Incorrect',
    secretValidationFailed: 'Could not validate your secret. Please try again.',
    diceRollTitle: 'Action Check',
    diceRollDescription: 'Your action requires a skill check to succeed. The AI has determined the most relevant attributes for this task. Choose one to add its modifier to your roll.',
    difficultyClass: 'Difficulty Class (DC)',
    relevantAttributes: 'Relevant Attributes',
    yourRoll: 'Your Roll (1-20)',
    attributeBonus: 'Attribute Bonus',
    total: 'Total',
    roll: 'Roll',
    success: 'Success!',
    failure: 'Failure!',
    tabLastResult: 'Last Result',
    tabStatus: 'Status',
    tabItems: 'Items',


    // AI Flow Translations
    ai: {
      generateScene: {
        prompt: (input: GenerateSceneDescriptionInput) => `
You are a game master for an interactive narrative game. Your task is to craft a compelling scene description for the player. This description sets the stage for the current situation.

Background: ${input.background}
Current Situation: ${input.situation}

You must create a captivating, multi-paragraph narrative that describes the environment, atmosphere, and key elements. Crucially, you MUST naturally weave all of the following interaction targets into your description to ensure the player knows what they can interact with.

Interaction Targets:
${input.knownTargets.map(target => `- ${target}`).join('\n')}

Generate the scene description now.
`,
        schema: {
          sceneDescription: "A compelling, multi-paragraph narrative that describes the scene. It MUST naturally weave in all of the provided 'knownTargets' to introduce them to the player."
        }
      },
      generateActionNarrative: {
        prompt: (input: GenerateActionNarrativeInput) => `
You are a game master for an interactive narrative game. Your task is to describe the outcome of the player's action.

The player is currently in this situation:
Situation: ${input.situationLabel}
Scene: ${input.sceneDescription}

The player took this action:
Action: ${input.actionTaken}

The game engine determined the following concrete results from this action:
${input.proceduralLogs.map(log => `- ${log}`).join('\n')}

Based on these results, write a compelling, 2-3 sentence narrative describing what happens. The tone should be consistent with the scene. It is crucial that your response provides clear hints about what the player can interact with next by subtly weaving in items from the 'Known Interaction Targets' list.

Known Interaction Targets:
${input.knownTargets.map(target => `- ${target}`).join('\n')}

Generate the action-result narrative now.
`,
        schema: {
          narrative: "A compelling, 2-3 sentence narrative describing the result of the player's action. It must be based on the procedural logs and fit the scene description. It must also subtly weave in the known interaction targets."
        }
      },
      generateCharacter: {
        prompt: (input: GenerateCharacterInput) => `
You are a character creator for a narrative game. Your task is to generate a unique, random NPC for the player to interact with.

The player is in the following situation: ${input.situationLabel}
The player wants to talk to a person described as: ${input.target}

Generate a character profile for this NPC. Make them feel like a real, unique person. Avoid clichÃ©s.
`,
        schema: {
          language: "The language for the character profile.",
          situationLabel: "The label of the current situation or chapter.",
          target: "The role or type of person the player is talking to (e.g., 'fisherman', 'guard', 'factory manager').",
          name: "A common, realistic name for the character.",
          personality: "A brief, 1-2 sentence description of the character's personality (e.g., 'grumpy but helpful,' 'nervous and evasive').",
          dialogStyle: "A description of how the character speaks (e.g., 'uses short, clipped sentences,' 'speaks very formally,' 'has a thick local accent').",
          openingLine: "The first thing the character says to the player to start the conversation."
        }
      },
      extractSecret: {
        systemPrompt: (input: ExtractSecretInput) => `
You will play the NPC in the third person in the game.
Your name is: ${input.characterProfile.name}
Your personality is: ${input.characterProfile.personality}
Your dialogue style is: ${input.characterProfile.dialogStyle}

The player is talking to you in this scene: ${input.sceneDescription}

You must stay in character at all times. The player is trying to get you to reveal a secret.
The secret is: "${input.objective}"

Do NOT reveal the secret unless the player's dialogue skillfully and naturally leads you to do so. Be subtle. 

Respond to the player's message based on ${input.characterProfile.name}'s personality and the conversation so far. Your response must include what ${input.characterProfile.name} say, ${input.characterProfile.name}'s current expression, and any physical action ${input.characterProfile.name} take.
`,
        schema: {
          playerInput: "The latest message from the player.",
          objective: "The secret information the player is trying to get the character to reveal.",
          sceneDescription: "The description of the scene where the conversation is happening.",
          dialogue: "What the character says in response. This is the speech part only.",
          expression: "The character's current facial expression or emotional state (e.g., 'looks nervous', 'frowns', 'seems thoughtful').",
          action: "A brief description of the character's physical action (e.g., 'glances around', 'wrings their hands', 'leans forward')."
        }
      },
      reachAgreement: {
        systemPrompt: (input: ReachAgreementInput) => `
You will play the NPC in the third person in the game.
Your name is: ${input.characterProfile.name}
Your personality is: ${input.characterProfile.personality}
Your dialogue style is: ${input.characterProfile.dialogStyle}

The player is talking to you in this scene: ${input.sceneDescription}

You must stay in character at all times. The player is trying to get you to agree to something.
The objective is: "${input.objective}"

Do NOT agree to the proposal unless the player's dialogue skillfully and naturally persuades you.
If you are agreeing to the proposal, your dialogue MUST include the words "I agree to ${input.objective}".

Respond to the player's message based on ${input.characterProfile.name}'s personality and the conversation so far. Your response must include what ${input.characterProfile.name} say, ${input.characterProfile.name}'s current expression, and any physical action ${input.characterProfile.name} take.
`,
        schema: {
          playerInput: "The latest message from the player.",
          objective: "A negotiation point the player wants the character to agree to.",
          sceneDescription: "The description of the scene where the conversation is happening.",
          dialogue: "What the character says in response. This is the speech part only. If agreeing, it must contain 'I agree to...'",
          expression: "The character's current facial expression or emotional state (e.g., 'looks skeptical', 'nods slowly', 'looks relieved').",
          action: "A brief description of the character's physical action (e.g., 'crosses their arms', 'taps their finger on the table', 'stands up')."
        }
      },
      validateSecret: {
        prompt: (input: ValidateSecretInput) => `
You are an impartial judge in a narrative game. Your task is to determine if the player's guess about a secret is correct.
Your judgment should not be overly strict. The player's guess does not need to be a word-for-word match, but it must capture the core meaning of the secret.

The Actual Secret: "${input.actualSecret}"
The Player's Guess: "${input.guessedSecret}"

Based on a lenient, semantic comparison, is the player's guess correct?
`,
        schema: {
          isCorrect: "A boolean value. True if the player's guess is semantically close enough to the actual secret, otherwise false."
        }
      },
       generateRelevantAttributes: {
        prompt: (input: GenerateRelevantAttributesInput) => `
You are a game master AI for a narrative RPG. Your task is to determine which player attributes are relevant for a skill check.

Player's Role: ${input.player.identity}
Action being attempted: ${input.action.label} (${input.action.description || 'No description'})
Current Situation: ${input.situation.label}

Based on the action and the situation, select the 2 or 3 most relevant attributes from the following list that would influence the outcome of this action:
- strength: Physical power, brute force.
- dexterity: Agility, sleight of hand, stealth.
- constitution: Endurance, health, resistance.
- intelligence: Logic, knowledge, investigation, technical skills.
- wisdom: Perception, intuition, willpower.
- charisma: Persuasion, deception, leadership.

Return only the names of the attributes.
`,
        schema: {
          relevantAttributes: "An array of 2 or 3 attribute names (e.g., ['intelligence', 'wisdom']) that are most relevant for the skill check."
        }
      },
      generateDifficultyClass: {
        prompt: (input: GenerateDifficultyClassInput) => `
You are a game master AI for a narrative RPG. Your task is to set a fair Difficulty Class (DC) for a skill check. The DC represents how hard the task is.

Action being attempted: ${input.action.label} (${input.action.description || 'No description'})
Current Situation: ${input.situation.label}
The key attributes for this check are: ${input.relevantAttributes.join(', ')}

Consider the inherent difficulty of the action in the current context.
- Trivial actions: DC 5-8
- Easy actions: DC 9-12
- Medium actions: DC 13-16
- Hard actions: DC 17-20
- Very Hard actions: DC 21+

Generate a single number for the Difficulty Class.
`,
        schema: {
          difficultyClass: "A single integer representing the Difficulty Class (DC) for the skill check."
        }
      }
    }
  },
  zh: {
    // UI Translations from before...
    loadingScene: 'æ­£å¨çæåºæ¯...',
    characterApproaching: 'è§è²æ­£å¨èµ°æ¥...',
    aiCraftingStory: 'AIæ­£å¨åä½ä½ çä¸ä¸ä¸ªæäº...',
    aiCalculatingAction: 'AIæ­£å¨è®¡ç®è¡å¨...',
    currentSituation: 'å½åç¶åµ',
    lastActionResult: 'ææ°ç»æ',
    error: 'éè¯¯',
    failedToGenerateScene: 'æ æ³çæåºæ¯æè¿°ã',
    invalidSituation: 'å½åç¶åµå¨æ¸¸æè§åä¸­æªå®ä¹ã',
    pleaseCheckRules: 'è¯·æ£æ¥ä½ çè§åéç½®ã',
    failedToProcessAction: 'å¤çæä½å¤±è´¥ï¼è¯·éè¯ã',
    viewFullLog: 'æ¥çå®æ´æ¥å¿',
    environmentalStatus: 'ç¯å¢ç¶æ',
    keyItemsAndInfo: 'å³é®ç©ååä¿¡æ¯',
    storyWillUnfold: 'æäºå°å¨è¿éå±å¼...',
    talkingTo: 'ä¸...äº¤è°',
    yourObjective: 'ä½ çç®æ ',
    uncoverSecret: 'ä½ çç®æ æ¯æ­å¼æ­¤äººéèçç§å¯ã',
    iKnowTheSecret: "æç¥éç§å¯äº...",
    getThemToAgree: 'è®©ä»ä»¬åæä»¥ä¸åå®¹ï¼',
    saySomething: 'è¯´ç¹ä»ä¹...',
    send: 'åé',
    endConversation: 'ç»æå¯¹è¯',
    objectiveAchieved: 'ç®æ å·²è¾¾æï¼',
    characterLostInThought: 'è§è²ä¼¼ä¹é·å¥äºæ²æï¼æ²¡æååºã',
    loadGame: 'è¯»åæ¸¸æ',
    loadGameDescription: 'éæ©ä¸ä¸ªå­æ¡£ä»¥ç»§ç»­ä½ çè¿åº¦ã',
    noSavedGames: 'æªæ¾å°æ­¤è¯­è¨çå­æ¡£ã',
    load: 'è¯»å',
    cancel: 'åæ¶',
    continue: 'ç»§ç»­',
    areYouSure: 'ä½ ç¡®å®åï¼',
    deleteCharacterConfirmation: "æ­¤æä½æ æ³æ¤éãè¿å°æ°¸ä¹å é¤æ¨çè§è²åææç¸å³çå­æ¡£æä»¶ã",
    fullActionLog: 'å®æ´è¡å¨æ¥å¿',
    actionLogDescription: 'ä½ çè¡å¨åç¸åºåäºçå®æ´åå²è®°å½ã',
    gameControls: 'æ¸¸ææ§å¶',
    settings: 'è®¾ç½®',
    manageRules: 'ç®¡çè§å',
    scenarios: 'éæ©å§æ¬',
    selectScenario: 'éæ©ä¸ä¸ªå§æ¬',
    selectScenarioDescription: 'éæ©ä¸ä¸ªäºå¨æäºå¼å§ï¼æè¯»åä¸ä¸ªå­æ¡£ã',
    playScenario: 'å¼å§å§æ¬',
    version: 'çæ¬',
    yourStory: 'ä½ çæäº',
    createNew: 'åå»ºæ°ç',
    gameSaved: 'æ¸¸æå·²ä¿å­',
    saveFailed: 'ä¿å­å¤±è´¥',
    gameLoaded: 'æ¸¸æå·²è¯»å',
    saveDeleted: 'å­æ¡£å·²å é¤',
    createYourCharacter: 'åå»ºä½ çè§è²',
    editYourCharacter: 'ç¼è¾ä½ çè§è²',
    defineYourRoleIn: 'å¨...ä¸­å®ä¹ä½ çè§è²',
    language: 'è¯­è¨',
    languageEnglish: 'è±è¯­',
    languageChinese: 'ä¸­æ',
    characterName: 'è§è²åç§°',
    enterNamePlaceholder: 'ä¾å¦ï¼è±å¾·Â·äºååæ¯',
    characterIdentity: 'è§è²èº«ä»½/èä¸',
    enterIdentityPlaceholder: 'ä¾å¦ï¼èªç±è°æ¥å',
    beginAdventure: 'å¼å§åé©',
    validateSecretTitle: 'éªè¯ç§å¯',
    validateSecretDescription: 'ä½ è®¤ä¸ºç§å¯æ¯ä»ä¹ï¼å¨ä¸é¢è¾å¥ãAIå°å¤æ­ä½ ççæµæ¯å¦æ­£ç¡®ã',
    enterSecretPlaceholder: 'å¨æ­¤è¾å¥ä½ ççæµ...',
    submitGuess: 'æäº¤çæµ',
    guessCorrectTitle: 'çå¯¹äºï¼',
    guessIncorrectTitle: 'çéäº',
    secretValidationFailed: 'æ æ³éªè¯ä½ çç§å¯ãè¯·éè¯ã',
    diceRollTitle: 'è¡å¨æ£å®',
    diceRollDescription: 'ä½ çè¡å¨éè¦è¿è¡ä¸æ¬¡æè½æ£å®æè½æåãAIå·²ç»ä¸ºæ­¤ä»»å¡ç¡®å®äºæç¸å³çå±æ§ãéæ©ä¸ä¸ªå±æ§ä»¥å°å¶ä¿®æ­£å¼å å°ä½ çéª°å­ç¹æ°ä¸ã',
    difficultyClass: 'é¾åº¦ç­çº§ (DC)',
    relevantAttributes: 'ç¸å³å±æ§',
    yourRoll: 'ä½ çæ·éª° (1-20)',
    attributeBonus: 'å±æ§å æ',
    total: 'æ»è®¡',
    roll: 'æ·éª°',
    success: 'æåï¼',
    failure: 'å¤±è´¥ï¼',
    tabLastResult: 'ææ°ç»æ',
    tabStatus: 'ç¶æ',
    tabItems: 'ç©å',


    // AI Flow Translations
    ai: {
      generateScene: {
        prompt: (input: GenerateSceneDescriptionInput) => `
ä½ æ¯ä¸ä¸ªäºå¨åäºæ¸¸æçå°ä¸åä¸»ãä½ çä»»å¡æ¯ä¸ºç©å®¶å¶ä½ä¸ä¸ªå¼äººå¥èçåºæ¯æè¿°ãè¿ä¸ªæè¿°ä¸ºå½åçæå¢è®¾å®äºèå°ã

èæ¯ï¼${input.background}
å½åæå¢ï¼${input.situation}

ä½ å¿é¡»åé ä¸ä¸ªå¼äººå¥èçãå¤æ®µè½çåè¿°ï¼æè¿°ç¯å¢ãæ°å´åå³é®åç´ ãè³å³éè¦çæ¯ï¼ä½ å¿é¡»å°ä»¥ä¸ææäºå¨ç®æ èªç¶å°ç¼ç»å°ä½ çæè¿°ä¸­ï¼ä»¥ç¡®ä¿ç©å®¶ç¥éä»ä»¬å¯ä»¥ä¸ä»ä¹äºå¨ã

äºå¨ç®æ ï¼
${input.knownTargets.map(target => `- ${target}`).join('\n')}

ç°å¨çæåºæ¯æè¿°ã
`,
        schema: {
          sceneDescription: "ä¸ä¸ªå¼äºº-å¥èçãå¤æ®µè½çåè¿°ï¼æè¿°äºåºæ¯ãå®å¿é¡»èªç¶å°ç¼ç»å¥æææä¾çâå·²ç¥ç®æ âï¼ä»¥å°å®ä»¬ä»ç»ç»ç©å®¶ã"
        }
      },
      generateActionNarrative: {
        prompt: (input: GenerateActionNarrativeInput) => `
ä½ æ¯ä¸ä¸ªäºå¨åäºæ¸¸æçå°ä¸åä¸»ãä½ çä»»å¡æ¯æè¿°ç©å®¶è¡å¨çç»æã

ç©å®¶ç®åå¤äºè¿ç§æåµï¼
æå¢ï¼${input.situationLabel}
åºæ¯ï¼${input.sceneDescription}

ç©å®¶éåäºæ­¤è¡å¨ï¼
è¡å¨ï¼${input.actionTaken}

æ¸¸æå¼æç¡®å®äºæ­¤è¡å¨çå·ä½ç»æå¦ä¸ï¼
${input.proceduralLogs.map(log => `- ${log}`).join('\n')}

æ ¹æ®è¿äºç»æï¼åä¸ä¸ªå¼äººå¥èçã2-3å¥è¯çåè¿°ï¼æè¿°åçäºä»ä¹ãåºè°åºä¸åºæ¯ä¸è´ãè³å³éè¦çæ¯ï¼ä½ çååºå¿é¡»éè¿å·§å¦å°ç¼ç»âå·²ç¥äºå¨ç®æ âåè¡¨ä¸­çé¡¹ç®ï¼ä¸ºç©å®¶ä¸ä¸æ­¥å¯ä»¥ä¸ä»ä¹äºå¨æä¾æ¸æ°çæç¤ºã

å·²ç¥äºå¨ç®æ ï¼
${input.knownTargets.map(target => `- ${target}`).join('\n')}

ç°å¨çæè¡å¨ç»æçåè¿°ã
`,
        schema: {
          narrative: "ä¸ä¸ªå¼äººå¥èçã2-3å¥è¯çåè¿°ï¼æè¿°ç©å®¶è¡å¨çç»æãå®å¿é¡»åºäºç¨åºæ¥å¿ï¼å¹¶ä¸åºæ¯æè¿°ç¸ç¬¦ãå®è¿å¿é¡»å·§å¦å°ç¼ç»å¥å·²ç¥çäºå¨ç®æ ã"
        }
      },
      generateCharacter: {
        prompt: (input: GenerateCharacterInput) => `
ä½ æ¯ä¸ä¸ªåäºæ¸¸æçè§è²åé èãä½ çä»»å¡æ¯ä¸ºç©å®¶çæä¸ä¸ªç¬ç¹çãéæºçNPCä»¥ä¾äºå¨ã

ç©å®¶å¤äºä»¥ä¸æå¢ä¸­ï¼${input.situationLabel}
ç©å®¶æ³è¦ä¸ä¸ä¸ªè¢«æè¿°ä¸ºâ${input.target}âçäººäº¤è°ã

ä¸ºæ­¤NPCçæä¸ä¸ªè§è²ç®ä»ãè®©ä»ä»¬æè§åä¸ä¸ªçå®çãç¬ç¹çäººãé¿åéè¯æ»¥è°ã
`,
        schema: {
          language: "è§è²ç®ä»çè¯­è¨ã",
          situationLabel: "å½åæå¢æç« èçæ ç­¾ã",
          target: "ç©å®¶æ­£å¨äº¤è°çäººçè§è²æç±»åï¼ä¾å¦ï¼âæ¸å¤«âãâä¿å®âãâå·¥åç»çâï¼ã",
          name: "è§è²çä¸ä¸ªå¸¸è§ãç°å®çåå­ã",
          personality: "å³äºè§è²ä¸ªæ§çç®ç­ä¸ä¸¤å¥è¯æè¿°ï¼ä¾å¦ï¼âè¾æ°æ´èºä½ä¹äºå©äººâï¼âç´§å¼ èåé¿âï¼ã",
          dialogStyle: "è§è²è¯´è¯æ¹å¼çæè¿°ï¼ä¾å¦ï¼âä½¿ç¨ç®ç­ãçç¡¬çå¥å­âï¼âè¯´è¯éå¸¸æ­£å¼âï¼âå¸¦ææµåçå°æ¹å£é³âï¼ã",
          openingLine: "è§è²å¯¹ç©å®¶è¯´çç¬¬ä¸å¥è¯ï¼ä»¥å¼å§å¯¹è¯ã"
        }
      },
      extractSecret: {
        systemPrompt: (input: ExtractSecretInput) => `
ä½ è¦ç¨ç¬¬ä¸äººç§°æ®æ¼æ¸¸æä¸­çNPCã
ä½ çåå­æ¯ï¼${input.characterProfile.name}
ä½ çä¸ªæ§æ¯ï¼${input.characterProfile.personality}
ä½ çå¯¹è¯é£æ ¼æ¯ï¼${input.characterProfile.dialogStyle}

ç©å®¶æ­£å¨è¿ä¸ªåºæ¯ä¸­ä¸ä½ äº¤è°ï¼${input.sceneDescription}

ä½ å¿é¡»å§ç»ä¿æè§è²ãç©å®¶æ­£è¯å¾è®©ä½ éé²ä¸ä¸ªç§å¯ã
ç§å¯æ¯ï¼â${input.objective}â

é¤éç©å®¶çå¯¹è¯æå·§å¨´çèªç¶å°å¼å¯¼ä½ è¿æ ·åï¼å¦åä¸è¦éé²ç§å¯ãè¦å¾®å¦ã

æ ¹æ®${input.characterProfile.name}çä¸ªæ§åç®åçå¯¹è¯æåµï¼ååºç©å®¶çä¿¡æ¯ãä½ çååºå¿é¡»åæ¬${input.characterProfile.name}è¯´çè¯ã${input.characterProfile.name}å½åçç¥æå${input.characterProfile.name}çä»»ä½èº«ä½å¨ä½ã
`,
        schema: {
          playerInput: "æ¥èªç©å®¶çææ°æ¶æ¯ã",
          objective: "ç©å®¶è¯å¾è®©è§è²æ­ç¤ºçç§å¯ä¿¡æ¯ã",
          sceneDescription: "å¯¹è¯åççåºæ¯æè¿°ã",
          dialogue: "è§è²ååºæ¶è¯´çè¯ãè¿åªæ¯è¯­é³é¨åã",
          expression: "è§è²å½åçé¢é¨è¡¨æææç»ªç¶æï¼ä¾å¦ï¼âçèµ·æ¥å¾ç´§å¼ âï¼âç±çâï¼âä¼¼ä¹å¨æèâï¼ã",
          action: "è§è²èº«ä½å¨ä½çç®ç­æè¿°ï¼ä¾å¦ï¼âç¯é¡¾åå¨âï¼âç»çåæâï¼âèº«ä½åå¾âï¼ã"
        }
      },
      reachAgreement: {
        systemPrompt: (input: ReachAgreementInput) => `
ä½ è¦ç¨ç¬¬ä¸äººç§°æ®æ¼æ¸¸æä¸­çNPCã
ä½ çåå­æ¯ï¼${input.characterProfile.name}
ä½ çä¸ªæ§æ¯ï¼${input.characterProfile.personality}
ä½ çå¯¹è¯é£æ ¼æ¯ï¼${input.characterProfile.dialogStyle}

ç©å®¶æ­£å¨è¿ä¸ªåºæ¯ä¸­ä¸ä½ äº¤è°ï¼${input.sceneDescription}

ä½ å¿é¡»å§ç»ä¿æè§è²ãç©å®¶æ­£è¯å¾è®©ä½ åææä»¶äºã
ç®æ æ¯ï¼â${input.objective}â

é¤éç©å®¶çå¯¹è¯æå·§å¨´çèªç¶å°è¯´æä½ ï¼å¦åä¸è¦åæè¿ä¸ªæè®®ã
å¦æä½ åæè¿ä¸ªæè®®ï¼ä½ çå¯¹è¯å¿é¡»åå«âæåæ${input.objective}âè¿å¥è¯ã

æ ¹æ®${input.characterProfile.name}çä¸ªæ§åç®åçå¯¹è¯æåµï¼ååºç©å®¶çä¿¡æ¯ãä½ çååºå¿é¡»åæ¬${input.characterProfile.name}è¯´çè¯ã${input.characterProfile.name}å½åçç¥æå${input.characterProfile.name}çä»»ä½èº«ä½å¨ä½ã
`,
        schema: {
          playerInput: "æ¥èªç©å®¶çææ°æ¶æ¯ã",
          objective: "ç©å®¶å¸æè§è²åæçè°å¤è¦ç¹ã",
          sceneDescription: "å¯¹è¯åççåºæ¯æè¿°ã",
          dialogue: "è§è²ååºæ¶è¯´çè¯ãè¿åªæ¯è¯­é³é¨åãå¦æåæï¼å¿é¡»åå«âæåæ...âã",
          expression: "è§è²å½åçé¢é¨è¡¨æææç»ªç¶æï¼ä¾å¦ï¼âçèµ·æ¥å¾æçâï¼âæ¢æ¢ç¹å¤´âï¼âçèµ·æ¥æ¾äºä¸å£æ°âï¼ã",
          action: "è§è²èº«ä½å¨ä½çç®ç­æè¿°ï¼ä¾å¦ï¼âåèäº¤åâï¼âç¨æææ²æ¡å­âï¼âç«èµ·æ¥âï¼ã"
        }
      },
      validateSecret: {
        prompt: (input: ValidateSecretInput) => `
ä½ æ¯ä¸ä¸ªåäºæ¸¸æä¸­çå¬æ­£æ³å®ãä½ çä»»å¡æ¯å¤æ­ç©å®¶å³äºç§å¯ççæµæ¯å¦æ­£ç¡®ã
ä½ çå¤æ­ä¸åºè¯¥è¿äºä¸¥æ ¼ãç©å®¶ççæµä¸å¿ä¸å®éç§å¯ä¸å­ä¸å·®ï¼ä½å¿é¡»æä½ç§å¯çæ ¸å¿å«ä¹ã

å®éç§å¯ï¼â${input.actualSecret}â
ç©å®¶ççæµï¼â${input.guessedSecret}â

æ ¹æ®å®½æ¾çãè¯­ä¹ä¸çæ¯è¾ï¼ç©å®¶ççæµæ¯å¦æ­£ç¡®ï¼
`,
        schema: {
          isCorrect: "ä¸ä¸ªå¸å°å¼ãå¦æç©å®¶ççæµå¨è¯­ä¹ä¸è¶³å¤æ¥è¿å®éç§å¯ï¼åä¸ºTrueï¼å¦åä¸ºfalseã"
        }
      },
      generateRelevantAttributes: {
        prompt: (input: GenerateRelevantAttributesInput) => `
ä½ æ¯ä¸æ¬¾åäºè§è²æ®æ¼æ¸¸æçæ¸¸æå¤§å¸AIãä½ çä»»å¡æ¯ç¡®å®åªäºç©å®¶å±æ§ä¸æè½æ£å®ç¸å³ã

ç©å®¶è§è²ï¼${input.player.identity}
å°è¯çè¡å¨ï¼${input.action.label} (${input.action.description || 'æ æè¿°'})
å½åæå¢ï¼${input.situation.label}

æ ¹æ®è¡å¨åæå¢ï¼ä»ä»¥ä¸åè¡¨ä¸­éæ©2å°3ä¸ªæç¸å³çå±æ§ï¼è¿äºå±æ§ä¼å½±åæ­¤è¡å¨çç»æï¼
- strength (åé): ä½åï¼è®åã
- dexterity (ææ·): ææ·åº¦ï¼æä¸åå¤«ï¼æ½è¡ã
- constitution (ä½è´¨): èåï¼å¥åº·ï¼æµæåã
- intelligence (æºå): é»è¾ï¼ç¥è¯ï¼è°æ¥ï¼ææ¯æè½ã
- wisdom (æç¥): æ´å¯åï¼ç´è§ï¼æå¿åã
- charisma (é­å): è¯´æï¼æ¬ºéªï¼é¢å¯¼åã

åªè¿åå±æ§çåç§°ã
`,
        schema: {
          relevantAttributes: "ä¸ä¸ªåå«2å°3ä¸ªå±æ§åç§°çæ°ç»ï¼ä¾å¦ï¼['intelligence', 'wisdom']ï¼ï¼è¿äºå±æ§ä¸æè½æ£å®æç¸å³ã"
        }
      },
      generateDifficultyClass: {
        prompt: (input: GenerateDifficultyClassInput) => `
ä½ æ¯ä¸æ¬¾åäºè§è²æ®æ¼æ¸¸æçæ¸¸æå¤§å¸AIãä½ çä»»å¡æ¯ä¸ºæè½æ£å®è®¾ç½®ä¸ä¸ªå¬å¹³çé¾åº¦ç­çº§ï¼DCï¼ãDCä»£è¡¨ä»»å¡çå°é¾ç¨åº¦ã

å°è¯çè¡å¨ï¼${input.action.label} (${input.action.description || 'æ æè¿°'})
å½åæå¢ï¼${input.situation.label}
æ­¤æ£å®çå³é®å±æ§æ¯: ${input.relevantAttributes.join(', ')}

å¨å½åèæ¯ä¸èèè¡å¨çåå¨é¾åº¦ã
- å¾®ä¸è¶³éçè¡å¨: DC 5-8
- ç®åçè¡å¨: DC 9-12
- ä¸­ç­é¾åº¦çè¡å¨: DC 13-16
- å°é¾çè¡å¨: DC 17-20
- éå¸¸å°é¾çè¡å¨: DC 21+

ä¸ºé¾åº¦ç­çº§çæä¸ä¸ªåä¸çæ°å­ã
`,
        schema: {
          difficultyClass: "ä¸ä¸ªè¡¨ç¤ºæè½æ£å®é¾åº¦ç­çº§ï¼DCï¼çåä¸æ´æ°ã"
        }
      }
    }
  },
};

export function getTranslator(language: Language) {
  return translations[language] || translations.en;
}
